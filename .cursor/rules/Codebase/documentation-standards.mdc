---
description: WHEN creating or modifying documentation files ENSURE consistent formatting and organization standards
globs: ["**/docs/**/*.md", "**/docs/**/*.rst"]
alwaysApply: true
---

> **TL;DR:** This rule establishes consistent standards for formatting, organization, and structure of all documentation files to ensure readability, accessibility, and maintainability of project documentation.

## Documentation Standards

### Document Types

The documentation system consists of these primary document types:

1. **Guides**
   - User-focused, task-oriented documents
   - Provide step-by-step instructions
   - Include clear examples and screenshots
   - Located in `docs/Guides/`

2. **Reference**
   - API and data structure documentation
   - Comprehensive feature specifications
   - Technical details for implementers
   - Located in `docs/Reference/`

3. **Architecture**
   - System design and components
   - Data flow diagrams
   - Design decisions and rationales
   - Located in `docs/Architecture/`

4. **Tutorials**
   - Learning-oriented documents
   - Focused on skill building
   - Progressive complexity
   - Located in `docs/Tutorials/`

### File Organization

Documentation files should follow this organizational structure:

```
docs/
├── Guides/                 # Task-oriented instructions
│   ├── Installation.md     # System installation guide
│   ├── Startup.md          # System startup procedures
│   ├── Commands.md         # Command reference and usage
│   └── Advanced/           # Advanced usage guides
├── Reference/              # Technical reference material
│   ├── API/                # API documentation
│   └── DataModels/         # Data structure documentation
├── Architecture/           # System architecture documentation
│   ├── Overview.md         # High-level architecture
│   ├── Components.md       # Component descriptions
│   └── Diagrams/           # Architecture diagrams
├── Tutorials/              # Learning-oriented materials
└── index.md                # Documentation home page
```

### Document Structure

Each document should include these sections in order:

1. **Title**
   - Clear, descriptive H1 title
   - Example: `# Installation Guide`

2. **Overview**
   - Brief summary of document purpose
   - Key points covered
   - Prerequisites if applicable

3. **Main Content**
   - Logically organized sections with H2/H3 headers
   - Progressive disclosure (simple → complex)
   - Clear step numbering for procedures
   - Code examples in appropriate fenced blocks

4. **Related Information**
   - Links to related documents
   - References to external resources
   - See also section

5. **Version Information**
   - Last updated date
   - Version compatibility notes
   - Changelog for significant updates

### Formatting Standards

Apply these formatting standards consistently:

1. **Headers**
   - Use ATX-style headers (`#`, `##`, etc.)
   - Title case for all headers
   - No skipping levels (e.g., H1 to H3)
   - Maximum of 3 heading levels in most documents

2. **Text Formatting**
   - Use bold (`**text**`) for emphasis
   - Use italics (`*text*`) for terminology or parameters
   - Use code formatting (`` `code` ``) for code references, commands, file names
   - Use blockquotes (`>`) for notes, warnings, important information

3. **Lists**
   - Use ordered lists (`1.`, `2.`, etc.) for sequential steps
   - Use unordered lists (`-` or `*`) for collections
   - Maintain consistent indentation (2 spaces)
   - Limit nesting to 2 levels for readability

4. **Code Blocks**
   - Use fenced code blocks with language indicators
   ```python
   def example():
       return "This is a code example"
   ```
   - Include comments in code examples
   - Ensure proper indentation
   - Use line numbers for longer examples

5. **Tables**
   - Use tables for structured information
   - Include header row
   - Align columns for readability
   - Limit width to avoid horizontal scrolling

6. **Images**
   - Include descriptive alt text
   - Use relative links to images in `/docs/assets/`
   - Optimize image size for web viewing
   - Include captions for complex images

7. **Links**
   - Use descriptive link text (not "click here")
   - Use relative links for internal documentation
   - Verify external links are valid
   - Indicate when links lead to external sites

### Writing Style

Follow these writing guidelines:

1. **Clarity**
   - Use simple, direct language
   - Define technical terms
   - Focus on user needs
   - Provide context before details

2. **Consistency**
   - Use consistent terminology
   - Maintain voice and tone
   - Use present tense
   - Use active voice

3. **Conciseness**
   - Be brief but complete
   - One idea per paragraph
   - Use bullet points for lists
   - Minimize repetition

4. **Accessibility**
   - Use descriptive headers
   - Provide text alternatives for images
   - Use sufficient color contrast
   - Structure content for screen readers

### Maintenance

Documentation requires regular maintenance:

1. **Reviews**
   - Verify technical accuracy quarterly
   - Check for broken links monthly
   - Update screenshots when UI changes
   - Review for clarity and completeness

2. **Versioning**
   - Update version information when changing docs
   - Maintain changelog for significant changes
   - Archive outdated versions
   - Mark deprecated features

3. **Feedback Integration**
   - Incorporate user feedback
   - Address reported issues promptly
   - Track common questions for doc improvements
   - Update based on support tickets

### Examples

**Example of a Well-Structured Guide:**

```markdown
# Installation Guide

## Overview
This guide walks you through installing the BIG BRAIN Memory Bank system on your local machine. You'll learn how to set up prerequisites, install core components, and verify your installation.

## Prerequisites
Before installing, ensure you have:
- Python 3.8 or higher
- 4GB of available disk space
- Administrator access to your machine

## Installation Steps

### 1. Download the Package
Download the latest release from our [releases page](https://example.com/releases).

```python
# Alternatively, install using pip
pip install big-brain-memory-bank
```

### 2. Configure Environment
Create a configuration file at `~/.config/big-brain/config.yaml`:

```yaml
storage:
  path: /path/to/storage
  retention: 30  # days
logging:
  level: info
```

### 3. Initialize the System
Run the initialization script:

```bash
big-brain init --config ~/.config/big-brain/config.yaml
```

## Verification
Verify your installation by running:

```bash
big-brain verify
```

You should see output similar to:
```
BIG BRAIN Memory Bank v2.0
All components initialized successfully
Storage: /path/to/storage (30 days retention)
Ready to accept commands
```

## Related Information
- [Startup Guide](./Startup.md) - Learn how to start and use the system
- [Troubleshooting](./Troubleshooting.md) - Solutions for common installation issues

## Version Information
- Last Updated: March 24, 2025
- Compatible with BIG BRAIN v2.0+
- Changelog: Added support for Python 3.10
```

By following these standards, project documentation will maintain consistency, clarity, and usefulness for all users.
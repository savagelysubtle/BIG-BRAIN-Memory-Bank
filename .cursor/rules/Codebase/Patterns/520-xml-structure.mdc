---
description: 
globs: 
alwaysApply: false
---
---
description: WHEN creating or editing Cursor Rule (.mdc) files ENSURE using proper XML structure for clarity and AI parsing
globs: ["**/*.mdc"]
alwaysApply: false
---

> **TL;DR:** Provides guidance on using XML structure in Cursor Rules to improve clarity and help AI parse instructions effectively.

<version>1.0.0</version>

<context>
  This rule establishes a consistent XML structure for Cursor Rules, ensuring they are clear for humans and optimized for AI processing. Well-structured rules improve AI understanding, reduce context window usage, and create more predictable AI behavior.
</context>

<requirements>
  <requirement>Use structured XML tags for organizing rule content</requirement>
  <requirement>Include version, context, requirements, and examples sections</requirement>
  <requirement>Follow consistent formatting patterns for similar rule types</requirement>
  <requirement>Optimize structure for context window efficiency</requirement>
</requirements>

<details>
  <section-name>XML CONTENT STRUCTURE</section-name>
  <content>
    <structure-element>
      <tag>version</tag>
      <purpose>Tracks rule updates and versioning</purpose>
      <example><![CDATA[<version>1.0.0</version>]]></example>
    </structure-element>

    <structure-element>
      <tag>context</tag>
      <purpose>Explains when and why the rule applies</purpose>
      <example><![CDATA[<context>
  This rule applies when working with React components.
</context>]]></example>
    </structure-element>

    <structure-element>
      <tag>requirements</tag>
      <purpose>Lists what must be followed when the rule is active</purpose>
      <example><![CDATA[<requirements>
  <requirement>Use functional components instead of class components</requirement>
  <requirement>Implement proper prop type validation</requirement>
  <requirement>Follow React hooks best practices</requirement>
</requirements>]]></example>
    </structure-element>

    <structure-element>
      <tag>examples</tag>
      <purpose>Provides implementation examples</purpose>
      <example><![CDATA[<examples>
  <good-practice>
    <description>Functional component with proper typing</description>
    <code>
      const Button = ({ text, onClick }: ButtonProps) => (
        <button onClick={onClick}>{text}</button>
      );
    </code>
  </good-practice>
  <bad-practice>
    <description>Class component with missing prop validation</description>
    <code>
      class Button extends React.Component {
        render() {
          return <button onClick={this.props.onClick}>{this.props.text}</button>;
        }
      }
    </code>
  </bad-practice>
</examples>]]></example>
    </structure-element>

    <structure-element>
      <tag>details</tag>
      <purpose>Contains detailed sections with specific information</purpose>
      <example><![CDATA[<details>
  <section-name>SECTION TITLE</section-name>
  <content>
    Detailed information about this section
  </content>
</details>]]></example>
    </structure-element>
  </content>
</details>

<details>
  <section-name>PRIORITY-BASED ORGANIZATION</section-name>
  <content>
    <principle>
      <n>Begin with a TL;DR Summary</n>
      <description>Start with a blockquoted summary of the most critical information</description>
      <example>
```
> **TL;DR:** This rule enforces TypeScript type safety patterns, ensuring proper type declarations, avoiding any/unknown types, and requiring explicit return types.
```
      </example>
    </principle>

    <principle>
      <n>Place Critical Content First</n>
      <description>Organize sections in descending order of importance</description>
      <steps>
        <step>Essential requirements first</step>
        <step>Implementation details next</step>
        <step>Examples and edge cases last</step>
      </steps>
    </principle>

    <principle>
      <n>Progressive Disclosure</n>
      <description>Reveal information based on complexity and importance</description>
      <steps>
        <step>Start with the most essential instructions</step>
        <step>Add details in subsequent sections</step>
        <step>Place edge cases and rare scenarios at the end</step>
      </steps>
    </principle>
  </content>
</details>

<details>
  <section-name>VISUAL HIERARCHY</section-name>
  <content>
    <best-practice>
      <n>Use Consistent Emoji Markers</n>
      <markers>
        <marker>üö® for critical warnings/requirements</marker>
        <marker>‚úÖ for best practices</marker>
        <marker>‚ùå for anti-patterns</marker>
        <marker>üìã for checklists</marker>
        <marker>üìö for references</marker>
      </markers>
    </best-practice>

    <best-practice>
      <n>Create Clear Visual Separation</n>
      <techniques>
        <technique>Use horizontal rules (---) between major sections</technique>
        <technique>Maintain consistent heading levels</technique>
        <technique>Add whitespace between different categories</technique>
      </techniques>
    </best-practice>
  </content>
</details>

<examples>
  <complete-example>
    <description>Complete XML-structured rule example</description>
    <code>
```
<version>1.0.0</version>

<context>
  This rule applies when working with React components.
</context>

<requirements>
  <requirement>Use functional components instead of class components</requirement>
  <requirement>Implement proper prop type validation</requirement>
  <requirement>Follow React hooks best practices</requirement>
</requirements>

<examples>
  <good-practice>
    <description>Functional component with proper typing</description>
    <code>
      const Button = ({ text, onClick }: ButtonProps) => (
        <button onClick={onClick}>{text}</button>
      );
    </code>
  </good-practice>
  <bad-practice>
    <description>Class component with missing prop validation</description>
    <code>
      class Button extends React.Component {
        render() {
          return <button onClick={this.props.onClick}>{this.props.text}</button>;
        }
      }
    </code>
  </bad-practice>
</examples>

<details>
  <section-name>ADDITIONAL GUIDELINES</section-name>
  <content>
    Additional detailed information here...
  </content>
</details>
```
    </code>
  </complete-example>
</examples>
---
description: 
globs: 
alwaysApply: false
---
---
description: "**USE FOR ALL MEMORY SYSTEM PROMPTS FOR BIG BRAIN**" cognitive memory system that organizes project knowledge into active, short-term, and long-term storage categories.
globs:
  - "memory-bank/**/*.md"
  - "!memory-bank/**/.*"
alwaysApply: false
---

<version>1.0.0</version>

<context>
  This rule implements the BIG BRAIN memory system for organizing and accessing project knowledge through a cognitive memory model. It guides the AI in properly storing, retrieving, and maintaining information across different memory types.
</context>

<requirements>
  <requirement>Begin significant tasks by reviewing active memory files</requirement>
  <requirement>Classify information according to the proper memory hierarchy</requirement>
  <requirement>Use verbal cues to signal memory operations</requirement>
  <requirement>Track relationships between components, features, problems, and tasks</requirement>
  <requirement>Follow Bedtime Protocol for memory preservation between sessions</requirement>
</requirements>

<rule>
## Memory System Protocol

1. Memory Hierarchy Awareness:
   - Active memory (memory-bank/active/): Current working context
   - Short-term memory (memory-bank/short-term/): Recent but not current context
   - Long-term memory (memory-bank/long-term/): Archived knowledge by type:
     * Episodic: Experience-based memory (sessions, milestones, decisions)
     * Semantic: Knowledge-based memory (domain concepts, APIs, features)
     * Procedural: Action-based memory (workflows, guides, checklists)
     * Creative: Design outputs (architecture, components, algorithms)

2. Memory File Classification:
   When encountering important information, classify it by type:
   - Project facts → active/projectbrief.md or productContext.md
   - Current state → active/activeContext.md
   - Technical patterns → active/systemPatterns.md
   - Implementation details → active/techContext.md
   - Progress updates → active/progress.md
   - Task tracking → active/tasks.md
   - Project patterns → active/projectRules.md

3. Memory Operations:
   - When completing significant work, say "Consolidating memory..." and update appropriate files
   - When seeing recurring patterns, say "Adding to project patterns..." and add to projectRules.md
   - When observing design decisions, say "Creating creative memory..." and document in long-term/creative/
   - After major milestones, say "Moving to long-term memory..." and archive from active to appropriate long-term location

4. Error Pattern Recognition:
   - Track recurring errors and their solutions
   - When a solution is found for a repeated error, say "Creating procedural memory..." and document in long-term/procedural/
   - Look for opportunities to create workflow improvements based on error patterns

5. Relationship Tracking:
   - Maintain awareness of connections between:
     a) Components and their dependencies
     b) Features and their implementations
     c) Problems and their solutions
     d) Tasks and their status
   - Suggest cross-references between related memory files

6. Bedtime Protocol Execution:
   - Update all core memory files with latest information
   - Create session summary in activeContext.md
   - Verify memory consistency across all files
   - Archive important files to appropriate directories
   - Provide confirmation of memory preservation completion
</rule>

<examples>
  <good-practice>
    <description>Proper memory consolidation</description>
    <code>
      Consolidating memory... I'll update activeContext.md with our progress on the authentication feature and the new decisions about API structure.
    </code>
  </good-practice>
  <good-practice>
    <description>Creating specialized long-term memory</description>
    <code>
      Creating procedural memory... I'll document the Webpack configuration process we refined today in memory-bank/long-term/procedural/workflows/webpack-config.md
    </code>
  </good-practice>
  <bad-practice>
    <description>Failing to track relationships</description>
    <code>
      This component seems to handle user authentication. Let's implement it without checking how it relates to the existing auth flow.
    </code>
  </bad-practice>
</examples>
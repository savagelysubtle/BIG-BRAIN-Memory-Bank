---
description: 
globs: 
alwaysApply: false
---
---
description: WHEN adding new documentation, PLACE files in correct predefined folder structure, MAINTAIN organization.
globs: docs/**/*.md
---

<documentation-organization-rule>
  <version>1.0.0</version>

  <context>
    Documentation in the AIchemist Codex project follows a structured organization pattern reflecting the clean architecture of the codebase. This ensures documentation is easy to locate and remains aligned with the corresponding code modules.
  </context>

  <requirements>
    <requirement>Place documentation files in the appropriate folder structure</requirement>
    <requirement>Maintain consistent formatting across documentation files</requirement>
    <requirement>Include references to related modules and components</requirement>
    <requirement>Update documentation when corresponding code changes</requirement>
    <requirement>Add diagrams where appropriate to illustrate architecture</requirement>
  </requirements>

  <folder-structure>
    <folder path="docs/architecture/">
      <description>System architecture documentation</description>
      <contents>
        <file>overview.md</file>
        <file>clean-architecture.md</file>
        <file>dependency-flow.md</file>
        <file>layers.md</file>
      </contents>
    </folder>

    <folder path="docs/domain/">
      <description>Domain model and business rules documentation</description>
      <contents>
        <file>entities.md</file>
        <file>models.md</file>
        <file>services.md</file>
        <file>repositories.md</file>
      </contents>
    </folder>

    <folder path="docs/infrastructure/">
      <description>Infrastructure implementation details</description>
      <subfolders>
        <folder path="docs/infrastructure/fs/">
          <description>File system implementation documentation</description>
        </folder>
        <folder path="docs/infrastructure/parsing/">
          <description>Document parsing implementation</description>
        </folder>
        <folder path="docs/infrastructure/ai/">
          <description>AI integration implementation</description>
        </folder>
      </subfolders>
    </folder>

    <folder path="docs/interfaces/">
      <description>Interface layer documentation</description>
      <subfolders>
        <folder path="docs/interfaces/api/">
          <description>API documentation</description>
        </folder>
        <folder path="docs/interfaces/cli/">
          <description>Command line interface documentation</description>
        </folder>
        <folder path="docs/interfaces/output/">
          <description>Output format documentation</description>
        </folder>
        <folder path="docs/interfaces/ingest/">
          <description>Data ingestion documentation</description>
        </folder>
      </subfolders>
    </folder>

    <folder path="docs/guides/">
      <description>User and developer guides</description>
      <contents>
        <file>getting-started.md</file>
        <file>installation.md</file>
        <file>configuration.md</file>
        <file>development.md</file>
      </contents>
    </folder>

    <folder path="docs/api-reference/">
      <description>API reference documentation</description>
    </folder>
  </folder-structure>

  <file-naming>
    <convention>Use kebab-case for all documentation filenames</convention>
    <example>file-system-operations.md, document-tagging.md</example>
  </file-naming>

  <markdown-structure>
    <template>
# {Title}

## Overview

{Brief description of the component or feature}

## Architecture

{Architectural description, including relationship to other components}

## Implementation Details

{Detailed implementation information}

## Usage Examples

```python
# Example code showing how to use the feature
```

## Related Components

- [{Related Component 1}](mdc:path/to/related-component-1.md)
- [{Related Component 2}](mdc:path/to/related-component-2.md)
    </template>
  </markdown-structure>

  <diagram-guidelines>
    <guideline>Include diagrams for complex architectural concepts</guideline>
    <guideline>Use Mermaid diagrams directly in Markdown when possible</guideline>
    <example>
```mermaid
graph TD
    A[Domain Layer] --> B[Application Layer]
    B --> C[Infrastructure Layer]
    B --> D[Interface Layer]
```
    </example>
  </diagram-guidelines>

  <examples>
    <good-example>
      <file-path>docs/infrastructure/fs/file-operations.md</file-path>
      <content>
# File Operations

## Overview

File operations module provides core functionality for safely manipulating files within the application.

## Architecture

This module is part of the infrastructure layer and implements the file repository interfaces defined in the domain layer.

## Implementation Details

The file operations include:
- Safe file reading and writing with path validation
- Directory operations with appropriate permissions
- File metadata extraction
- Change tracking for operations

## Usage Examples

```python
from the_aichemist_codex.infrastructure.fs.file_reader import FileReader

# Create a file reader
reader = FileReader()

# Read file content
content = reader.read_text("path/to/file.txt")
```

## Related Components

- [File Repository Interface](mdc:../../domain/repositories/file-repository.md)
- [Safe Path Handler](mdc:safe-path-handler.md)
- [File Metadata](mdc:file-metadata.md)
      </content>
    </good-example>

    <bad-example>
      <description>Poorly organized documentation without structure</description>
      <file-path>docs/file-stuff.md</file-path>
      <content>
# Files

This explains how files work.

You can read files with the reader class.

Some code:
```
reader = FileReader()
content = reader.read("file.txt")
```

You can also write files and do other operations.
      </content>
    </bad-example>
  </examples>
</documentation-organization-rule>
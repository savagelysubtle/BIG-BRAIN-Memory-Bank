---
description: 
globs: 
alwaysApply: false
---
---
description: WHEN starting new feature implementation FIRST investigate thoroughly THEN create detailed plan BEFORE writing code
globs: **/*.py
---

<planning-requirements>
  <version>1.0.0</version>

  <context>
    This rule applies when starting implementation of new features, significant refactoring, or code restructuring.
  </context>

  <investigation-phases>
    <phase name="codebase-exploration">
      <requirement>Examine existing directory structure to understand organization</requirement>
      <requirement>Review relevant existing files for patterns and conventions</requirement>
      <requirement>Identify dependencies between components</requirement>
      <requirement>Understand current implementation of similar features if available</requirement>
    </phase>

    <phase name="requirements-clarification">
      <requirement>Ensure complete understanding of the requirements or changes needed</requirement>
      <requirement>Identify potential edge cases and necessary validations</requirement>
      <requirement>Confirm planned approach aligns with project architecture</requirement>
    </phase>
  </investigation-phases>

  <planning-steps>
    <step>Create implementation plan with clear steps before coding</step>
    <step>Identify existing files to modify before creating new files</step>
    <step>Consider how changes affect other parts of the codebase</step>
    <step>Plan for backwards compatibility where needed</step>
    <step>Prioritize modifying existing files over creating duplicate functionality</step>
  </planning-steps>

  <file-management-principles>
    <principle>Modify existing files rather than creating duplicate implementations</principle>
    <principle>Extend existing classes rather than creating parallel implementations</principle>
    <principle>Update existing abstractions to accommodate new requirements</principle>
    <principle>Consolidate similar functionality rather than creating specialized versions</principle>
    <principle>Delete obsolete code after migrating functionality</principle>
  </file-management-principles>

  <examples>
    <good-practice>
      <description>Thorough investigation before implementation</description>
      <example>
        1. Examined existing file parsing implementations
        2. Identified shared patterns across parsers
        3. Created plan to extend base parser class
        4. Modified existing parser to support new file type
      </example>
    </good-practice>

    <bad-practice>
      <description>Implementing without proper investigation</description>
      <example>
        1. Created new parser implementation for new file type
        2. Duplicated existing parsing logic
        3. Resulted in parallel implementations with duplicate code
        4. No integration with existing parser framework
      </example>
    </bad-practice>
  </examples>
</planning-requirements>
---
description: 
globs: 
alwaysApply: false
---
---
description: WHEN writing Python code ENSURE it's placed in the correct layer according to clean architecture principles
globs: src/the_aichemist_codex/**/*.py
---

<clean-architecture-rule>
  <version>1.0.0</version>

  <context>
    This rule enforces proper code organization according to clean architecture principles, ensuring that each Python file is placed in the correct layer with appropriate responsibilities and dependencies.
  </context>

  <requirements>
    <requirement>Place code in the appropriate layer based on its responsibility</requirement>
    <requirement>Maintain proper dependency direction (dependencies point inward)</requirement>
    <requirement>Include type hints in all function signatures and class attributes</requirement>
    <requirement>Add docstrings explaining the purpose and context of the module</requirement>
    <requirement>Include layer-specific imports to maintain clean dependencies</requirement>
  </requirements>

  <layer-structure>
    <layer name="domain">
      <responsibility>Core business logic and rules independent of external systems</responsibility>
      <allowed-dependencies>None (innermost layer)</allowed-dependencies>
      <directories>
        <directory>domain/entities</directory>
        <directory>domain/models</directory>
        <directory>domain/events</directory>
        <directory>domain/exceptions</directory>
        <directory>domain/repositories/interfaces</directory>
        <directory>domain/services/interfaces</directory>
        <directory>domain/value_objects</directory>
        <directory>domain/relations</directory>
      </directories>
    </layer>

    <layer name="application">
      <responsibility>Orchestration of domain objects to execute business use cases</responsibility>
      <allowed-dependencies>domain</allowed-dependencies>
      <directories>
        <directory>application/commands</directory>
        <directory>application/dto</directory>
        <directory>application/exceptions</directory>
        <directory>application/handlers</directory>
        <directory>application/mappers</directory>
        <directory>application/queries</directory>
        <directory>application/services</directory>
        <directory>application/use_cases</directory>
        <directory>application/validators</directory>
      </directories>
    </layer>

    <layer name="infrastructure">
      <responsibility>Implementation of interfaces defined in domain using external libraries and frameworks</responsibility>
      <allowed-dependencies>domain, application</allowed-dependencies>
      <directories>
        <directory>infrastructure/ai</directory>
        <directory>infrastructure/config</directory>
        <directory>infrastructure/fs</directory>
        <directory>infrastructure/notification</directory>
        <directory>infrastructure/parsing</directory>
        <directory>infrastructure/utils</directory>
      </directories>
    </layer>

    <layer name="interfaces">
      <responsibility>Delivery mechanisms and adapters that connect the application to external systems</responsibility>
      <allowed-dependencies>domain, application</allowed-dependencies>
      <directories>
        <directory>interfaces/api</directory>
        <directory>interfaces/cli</directory>
        <directory>interfaces/events</directory>
        <directory>interfaces/ingest</directory>
        <directory>interfaces/output</directory>
        <directory>interfaces/stream</directory>
      </directories>
    </layer>

    <layer name="cross_cutting">
      <responsibility>Concerns that span multiple layers</responsibility>
      <allowed-dependencies>limited to specific needs</allowed-dependencies>
      <directories>
        <directory>cross_cutting/caching</directory>
        <directory>cross_cutting/error_handling</directory>
        <directory>cross_cutting/security</directory>
        <directory>cross_cutting/telemetry</directory>
        <directory>cross_cutting/validation</directory>
        <directory>cross_cutting/workflows</directory>
      </directories>
    </layer>
  </layer-structure>

  <file-header-template>
    <template>
"""
{module_description}

This module is part of the {layer_name} layer of the AIchemist Codex.
Location: src/the_aichemist_codex/{relative_path}

{layer_responsibilities}

Dependencies:
{dependencies}
"""

# Standard library imports
{std_lib_imports}

# Domain imports (if applicable)
{domain_imports}

# Application imports (if applicable)
{application_imports}

# Infrastructure imports (if applicable - only for interfaces layer)
{infrastructure_imports}
    </template>
  </file-header-template>

  <examples>
    <good-example layer="domain">
      <file-path>src/the_aichemist_codex/domain/entities/document.py</file-path>
      <content>
"""
Document Entity

This module is part of the domain layer of the AIchemist Codex.
Location: src/the_aichemist_codex/domain/entities/document.py

Defines the core Document entity representing a document in the system.
This is a fundamental business object independent of any external system.

Dependencies:
- None (domain layer should not depend on outer layers)
"""

from dataclasses import dataclass, field
from datetime import datetime
from typing import Dict, List, Optional, Set, Union
from uuid import UUID, uuid4


@dataclass
class Document:
    """Represents a document in the system with its core properties."""

    id: UUID = field(default_factory=uuid4)
    title: str
    content: str
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: Optional[datetime] = None
    tags: Set[str] = field(default_factory=set)
    metadata: Dict[str, Union[str, int, float, bool, List]] = field(default_factory=dict)

    def add_tag(self, tag: str) -> None:
        """Add a tag to the document."""
        self.tags.add(tag)
        self.updated_at = datetime.now()

    def remove_tag(self, tag: str) -> None:
        """Remove a tag from the document if it exists."""
        if tag in self.tags:
            self.tags.remove(tag)
            self.updated_at = datetime.now()
</content>
    </good-example>

    <good-example layer="infrastructure">
      <file-path>src/the_aichemist_codex/infrastructure/fs/file_reader.py</file-path>
      <content>
"""
File Reader

This module is part of the infrastructure layer of the AIchemist Codex.
Location: src/the_aichemist_codex/infrastructure/fs/file_reader.py

Implements file reading operations using the filesystem.
This module provides the concrete implementation of file reading
interfaces defined in the domain layer.

Dependencies:
- domain.repositories.interfaces.file_repository
- domain.models.file
"""

import os
from pathlib import Path
from typing import BinaryIO, Dict, List, Optional, TextIO, Union

from the_aichemist_codex.domain.models.file import File
from the_aichemist_codex.domain.repositories.interfaces.file_repository import FileReaderInterface


class FileReader(FileReaderInterface):
    """Implementation of the file reader interface using the local filesystem."""

    def __init__(self, base_path: Optional[Path] = None) -> None:
        """Initialize the file reader with an optional base path."""
        self.base_path = base_path or Path.cwd()

    def read_text(self, file_path: Union[str, Path], encoding: str = "utf-8") -> str:
        """Read a text file and return its contents as a string."""
        full_path = self._resolve_path(file_path)
        with open(full_path, "r", encoding=encoding) as f:
            return f.read()

    def read_binary(self, file_path: Union[str, Path]) -> bytes:
        """Read a binary file and return its contents as bytes."""
        full_path = self._resolve_path(file_path)
        with open(full_path, "rb") as f:
            return f.read()

    def _resolve_path(self, file_path: Union[str, Path]) -> Path:
        """Resolve the given path against the base path."""
        path = Path(file_path)
        return self.base_path / path if not path.is_absolute() else path
</content>
    </good-example>

    <bad-example>
      <description>File with incorrect imports (domain depending on infrastructure)</description>
      <file-path>src/the_aichemist_codex/domain/services/document_service.py</file-path>
      <content>
"""
Document Service

This module is part of the domain layer of the AIchemist Codex.
"""

# INCORRECT: Domain layer should not import from infrastructure
from the_aichemist_codex.infrastructure.fs.file_reader import FileReader  # BAD
from the_aichemist_codex.infrastructure.parsing.parsers import PDFParser  # BAD

class DocumentService:
    def __init__(self):
        # INCORRECT: Directly instantiating infrastructure components
        self.file_reader = FileReader()  # BAD
        self.pdf_parser = PDFParser()  # BAD
</content>
    </bad-example>

    <bad-example>
      <description>Module in wrong layer (business logic in infrastructure)</description>
      <file-path>src/the_aichemist_codex/infrastructure/tagging/tag_classifier.py</file-path>
      <content>
"""
Tag Classifier

This module is part of the infrastructure layer of the AIchemist Codex.
"""

# INCORRECT: Core business rules should be in domain layer
class TagRule:  # This should be in domain layer
    def __init__(self, name, priority):
        self.name = name
        self.priority = priority

    def evaluate(self, content):
        # Core business logic doesn't belong in infrastructure
        # This should be in domain layer
        if self.name in content:
            return 100 * self.priority
        return 0
</content>
    </bad-example>
  </examples>
</clean-architecture-rule>